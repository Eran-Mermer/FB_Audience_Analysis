#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt


# In[2]:


today_import = dt.date.today().strftime('%b-%d-%Y')


# In[3]:


# campaigns = pd.read_csv(f"../Data/Campaigns_Lifetime-Dec-13-2009-{today_import}.csv")\
#                         .drop(["Reporting Starts", "Reporting Ends"], axis=1)
# ad_sets = pd.read_csv(f"../Data/Ad_Sets_Lifetime-Dec-13-2009-{today_import}.csv")\
#                         .drop(["Reporting Starts", "Reporting Ends"], axis=1)
# ads = pd.read_csv(f"../Data/Ads_Lifetime-Dec-13-2009-{today_import}.csv")\
#                         .drop(["Reporting Starts", "Reporting Ends"], axis=1)
# demographifcs = pd.read_csv(f"../Data/Demographics_Lifetime-Dec-13-2009-{today_import}.csv")
# geographics = pd.read_csv(f"../Data/Geographics_Lifetime-Dec-13-2009-{today_import}.csv")
# placements = pd.read_csv(f"../Data/Placements_Device_Platform_Lifetime-Dec-13-2009-{today_import}.csv")


# # -- Data  Cleansing --

# ## Campaigns
# **PK** - Campaign ID + Day
# 
# * Campaign Name - The name **I** chose for the campaign
# * **Campaign ID** - ID generated by FB Ads
# * Objective - The Goal of the campaign
# * **Day** - The day the campaign was running
# * Amount spent (ILS) - Total cost of the campaign for the day

# In[4]:


campaigns_dataset_path = "../Data/Campaigns_Lifetime-Dec-13-2009-May-15-2020.csv"
campaigns = (pd
             .read_csv(filepath_or_buffer = campaigns_dataset_path, parse_dates = ["Day"])
             .rename(columns={"Amount Spent (ILS)":"Amount Spent"})
             .drop(["Reporting Starts", "Reporting Ends"], axis=1)
            )


# In[5]:


campaigns.head(1)


# ## Ad_Sets
# **PK** - Ad Set ID + Day<br>
# **FK** - Campaign ID + Day
# 
# * Ad Set Name - The name **I** chose for the Ad Set
# * **Ad Set ID** - ID generated by FB Ads
# * Campaign ID - The 'Father' campaign of the Ad Set
# * **Day** - The day the Ad Set was running
# * Amount spent (ILS) - Total cost of the Ad Set for the day

# In[6]:


adset_dataset_path = "../Data/Ad_Sets_Lifetime-Dec-13-2009-May-15-2020.csv"
ad_sets = (pd
             .read_csv(filepath_or_buffer = adset_dataset_path, parse_dates = ["Day"])
             .rename(columns={"Amount Spent (ILS)":"Amount Spent"})
             .drop(["Reporting Starts", "Reporting Ends"], axis=1)
            )


# In[7]:


ad_sets.head(1)


# ## Ads
# **PK** - Ad ID + Day<br>
# **FK** - Ad Set ID + Day
# 
# * Ad Name - The name **I** chose for the Ad or given by the Ad Set
# * **Ad ID** - ID generated by FB Ads
# * Ad Set ID - The 'Father' Ad Set of the Ad
# * **Day** - The day the Ad was running
# * Amount spent (ILS) - Total cost of the Ad for the day

# In[8]:


ads_dataset_path = "../Data/Ads_Lifetime-Dec-13-2009-May-15-2020.csv"
ads = (pd
             .read_csv(filepath_or_buffer = ads_dataset_path, parse_dates = ["Day"])
             .rename(columns={"Amount Spent (ILS)":"Amount Spent"})
             .drop(["Reporting Starts", "Reporting Ends"], axis=1)
            )


# In[9]:


ads.head(1)


# ## Demographifcs
# **FK** - Campaign ID + Day<br>
# **FK** - Ad Set ID + Day<br>
# **FK** - Ad ID + Day<br>
# 
# * Campaign ID - ID of campaign generated by FB Ads
# * Ad Set ID - ID of Ad Set generated by FB Ads
# * Ad ID - ID of Ad generated by FB Ads
# * Day - The day the campaign/Ad Set/Ad were running
# * Age - View your data by age range
# * Gender - View your data by gender
# * Reach - The number of people who saw the Ad at least once
# * Impressions - The number of times the Ad were on screen
# * Frequency - The average number of times each person saw the Ad
# * Result Type - Refers to the objective of the campaign
# * Results - The number of times the Ad achieved an outcome, based on the objective selected
# * Cost per result - The average cost per result from the Ad
# * Amount Spent (ILS) - Total cost of the Ad for the region -->> that  day
# * CPM - Cost per 1,000 Impressions
# * CTR - Link Click <--> Through Rate
# * CPC - The average cost for each click (any click)

# In[10]:


demographics_dataset_path = "../Data/Demographics_Lifetime-Dec-13-2009-May-15-2020.csv"
demographics = (pd
                .read_csv(filepath_or_buffer = demographics_dataset_path, parse_dates = ["Day"])
                .rename(columns={"Amount Spent (ILS)":"Amount Spent",
                                 "CPM (Cost per 1,000 Impressions)":"CPM",
                                 "CTR (Link Click-Through Rate)":"CTR",
                                 "CPC (All)":"CPC"})
                .drop(["Reporting Starts", "Reporting Ends"], axis=1)
                )


# In[11]:


demographics.head(1)


# ## Geographics
# **FK** - Campaign ID + Day
# **FK** - Ad Set ID + Day
# **FK** - Ad ID + Day
# 
# * Campaign ID - ID of campaign generated by FB Ads
# * Ad Set ID - ID of Ad Set generated by FB Ads
# * Ad ID - ID of Ad generated by FB Ads
# * Day - The day the campaign/Ad Set/Ad were running
# * Region - The region where people live or were located when they saw the Ad
# * Reach - The number of people who saw the Ad at least once
# * Impressions - The number of times the Ad were on screen
# * Frequency - The average number of times each person saw the Ad
# * Result Type - Refers to the objective of the campaign
# * Results - The number of times the Ad achieved an outcome, based on the objective selected
# * Cost per result - The average cost per result from the Ad
# * Amount Spent (ILS) - Total cost of the Ad for the region -->> that  day
# * CPM - Cost per 1,000 Impressions
# * CTR - Link Click <--> Through Rate
# * CPC - The average cost for each click (any click)

# In[12]:


geographics_dataset_path = "../Data/Geographics_Lifetime-Dec-13-2009-May-15-2020.csv"
geographics = (pd
                .read_csv(filepath_or_buffer = geographics_dataset_path, parse_dates = ["Day"])
                .rename(columns={"Amount Spent (ILS)":"Amount Spent",
                                 "CPM (Cost per 1,000 Impressions)":"CPM",
                                 "CTR (Link Click-Through Rate)":"CTR",
                                 "CPC (All)":"CPC"})
                .drop(["Reporting Starts", "Reporting Ends"], axis=1)
              )


# In[13]:


geographics.head(1)


# ## Placements
# **FK** - Campaign ID + Day<br>
# **FK** - Ad Set ID + Day<br>
# **FK** - Ad ID + Day<br>
# 
# * Campaign ID - ID of campaign generated by FB Ads
# * Ad Set ID - ID of Ad Set generated by FB Ads
# * Ad ID - ID of Ad generated by FB Ads
# * Day - The day the campaign/Ad Set/Ad were running
# * Platform - View data by platform where the Ad was shown (ex: Facebook, Instagram)
# * Placement - View data by placement where the Ad was shown (ex: Facebook desktop News Feed, Instagram mobile News Feed)
# * Device Platform - where the Ad was shown and devices were using (ex: Facebook desktop News Feed, Instagram mobile News Feed)
# * Reach - The number of people who saw the Ad at least once
# * Impressions - The number of times the Ad were on screen
# * Frequency - The average number of times each person saw the Ad
# * Result Type - Refers to the objective of the campaign
# * Results - The number of times the Ad achieved an outcome, based on the objective selected
# * Cost per result - The average cost per result from the Ad
# * Amount Spent (ILS) - Total cost of the Ad for the region -->> that  day
# * CPM - Cost per 1,000 Impressions
# * CTR - Link Click <--> Through Rate
# * CPC - The average cost for each click (any click)

# In[14]:


placements_dataset_path = "../Data/Placements_Device_Platform_Lifetime-Dec-13-2009-May-15-2020.csv"
placements = (pd
                .read_csv(filepath_or_buffer = placements_dataset_path, parse_dates = ["Day"])
                .rename(columns={"Amount Spent (ILS)":"Amount Spent",
                                 "CPM (Cost per 1,000 Impressions)":"CPM",
                                 "CTR (Link Click-Through Rate)":"CTR",
                                 "CPC (All)":"CPC"})
                .drop(["Reporting Starts", "Reporting Ends"], axis=1)
             )


# In[15]:


placements.head(1)


# # -- Analysis --

# ### # Optimal Age & Gender:

# In[16]:


ads_demo = ads.merge(demographics,
                how='inner',
                left_on=['Ad ID', 'Day'],
                right_on=['Ad ID', 'Day'])


# #### Top 5 Age-Gender Groups by results:

# In[17]:


unknown_filter = ads_demo["Gender"] != 'unknown'
five_ads_demo = (ads_demo[unknown_filter].groupby(["Age", "Gender"])["Results"].sum()
                        .to_frame().nlargest(5, "Results", "all").reset_index())
five_ads_demo


# In[18]:


x_axis = five_ads_demo["Age"] +" . "+ five_ads_demo["Gender"]
y_axis = five_ads_demo["Results"]

plt.figure(figsize=(10,3))
plt.xticks(rotation= 75)
plt.bar(x_axis, y_axis)

plt.title('Age-Gender groups, by results')
plt.xlabel('Age-Gender')
plt.ylabel('Results')
plt.show()


# # Conclusions #1:
#    The optimal age + gender for the company's ads are -
#    * Female 18 - 34
#    * male 25 - 34

# ---------------

# ### # Optimal Placements:

# In[19]:


ads_place = ads.merge(placements,
                how='inner',
                left_on=['Ad ID', 'Day'],
                right_on=['Ad ID', 'Day'])


# #### Top 5 Platform-Placements groups on <u>Mobile</u>, by results:

# In[20]:


five_ads_place = (ads_place.groupby(["Platform", "Placement", "Device Platform"])["Results"].sum()
                           .to_frame().reset_index())
five_ads_place


# In[21]:


x_axis = five_ads_place["Platform"] +"."+ five_ads_place["Placement"]
y_axis = five_ads_place["Results"]

plt.figure(figsize=(10,3))
plt.xticks(rotation= 75)
plt.bar(x_axis, y_axis)

plt.title('Platform-Placements groups on Mobile, by results')
plt.xlabel('Platform-Placements')
plt.ylabel('Results')
plt.show()


# # Conclusions #2:
#    The optimal Platform-Placements for the company's ads are -
#    * Instagram Stories on mobile
#    * Facebook feed on mobile
#    * instagram feed on mobile

# ---------------

# ### # Optimal Placements:

# In[19]:


ads_place = ads.merge(placements,
                how='inner',
                left_on=['Ad ID', 'Day'],
                right_on=['Ad ID', 'Day'])


# #### Top 5 Platform-Placements groups on <u>Mobile</u>, by results:

# In[20]:


five_ads_place = (ads_place.groupby(["Platform", "Placement", "Device Platform"])["Results"].sum()
                           .to_frame().reset_index())
five_ads_place


# In[21]:


x_axis = five_ads_place["Platform"] +"."+ five_ads_place["Placement"]
y_axis = five_ads_place["Results"]

plt.figure(figsize=(10,3))
plt.xticks(rotation= 75)
plt.bar(x_axis, y_axis)

plt.title('Platform-Placements groups on Mobile, by results')
plt.xlabel('Platform-Placements')
plt.ylabel('Results')
plt.show()


# # Conclusions #3:
#    The optimal Platform-Placements for the company's ads are -
#    * Instagram Stories on mobile
#    * Facebook feed on mobile
#    * instagram feed on mobile

# ---------------

# ### # Optimal Locations:

# In[22]:


ads_loc = ads.merge(geographics,
                how='inner',
                left_on=['Ad ID', 'Day'],
                right_on=['Ad ID', 'Day'])


# #### Top 5 Age-Gender Groups by results:

# In[23]:


five_ads_loc = (ads_loc.groupby("Region")["Results"].sum()
                           .to_frame().nlargest(5, "Results", "all").reset_index())
five_ads_loc


# In[24]:


x_axis = five_ads_loc["Region"]
y_axis = five_ads_loc["Results"]

plt.figure(figsize=(10,3))
plt.xticks(rotation= 75)
plt.bar(x_axis, y_axis)

plt.title('Region by results')
plt.xlabel('Region')
plt.ylabel('Results')
plt.show()


# # Conclusions #4:
#    The optimal regions for the company's ads are -
#    * Tel Aviv
#    * Central district

# ---------------

# ### # Optimal Days:

# In[25]:


# Adding 'Week Day' column extract from 'Day'
ads["Week Day"] = ads["Day"].dt.strftime("%A")


# In[26]:


ads_loc = ads.merge(geographics,
                how='inner',
                left_on=['Ad ID', 'Day'],
                right_on=['Ad ID', 'Day'])


# #### Ads performance by WEEK DAY:

# In[27]:


result_days = ads_loc.groupby("Week Day")["Results"].sum().to_frame().sort_values("Results")
result_days


# #### Ads performance by WEEK DAY (Pie chart):

# In[28]:


y_axis = result_days["Results"]
p_size = y_axis
p_labels = result_days.index
p_colors = ['red', 'blue', 'green', 'orange', 'purple', 'plum', 'salmon']

plt.pie(p_size, colors=p_colors, startangle=85, explode=(0.3, 0.3, 0.1, 0.1, 0.1, 0.1, 0.1), shadow=True)

plt.title('Results by Week Day')
plt.axis('equal')
plt.legend(p_labels, loc=6, borderaxespad=-5)
plt.tight_layout()
plt.show()


# #### Ads performance by WEEK DAY (Bar chart):

# In[29]:


x_axis = result_days.index
y_axis = result_days["Results"]

plt.figure(figsize=(10,3))
plt.xticks(rotation= 75)
plt.bar(x_axis, y_axis)

plt.title('Day by results')
plt.xlabel('Week Day')
plt.ylabel('Results')
plt.show()


# # Conclusions #5:
#    The optimal week days for the company's ads are -
#    __Monday to Thursday__

# ---------------

# # The company's optimal general <u>audience</u>  and <u>days</u>  to target are:<br>
# <font color = orange>
#    #### Female 18 - 34 & male 25 - 34 who lives in Tel Aviv District, using Instagram stories & feed + Facebook feed, on mobile.<br>
#    #### Run ads Monday to Thursday

# ---------------

# ---------------

# # Exploring optimal daily bugdet for each campaign target

# #### Get list of Campaigns targets:

# In[30]:


objective = campaigns.groupby(["Campaign ID", "Objective"])["Amount Spent"].count().reset_index()
objective_list = objective["Objective"].tolist()
output = []
for x in objective_list:
    if x not in output:
        output.append(x)
objective_list = output
objective_list


# ### Budget

# #### Is there a direct link between daily budget and results?

# In[52]:


campaign_target = input(f"Choose the target you need form the list: {objective_list}")


# In[53]:


camp_loc = campaigns.merge(geographics,
                how='inner',
                left_on=['Campaign ID', 'Day'],
                right_on=['Campaign ID', 'Day'])


# In[54]:


mask_target = camp_loc["Objective"] == campaign_target
camp_loc["Amount Spent_x"] = round(camp_loc["Amount Spent_x"])
day_budg = camp_loc[mask_target].rename(columns={"Amount Spent_x":"Daily Budget"}).groupby("Daily Budget")["Results"].sum().to_frame().sort_values("Daily Budget")

day_budg.sort_values("Results", ascending=False).head()


# In[55]:


x_axis = day_budg.index
y_axis = day_budg["Results"]

plt.figure(figsize=(10,3))
plt.plot(x_axis, y_axis, marker = 'o')

plt.xlabel('Daily Budget')
plt.ylabel('Results')
plt.title(f'Daily Budget and Results in a {campaign_target} campaign')
plt.show()


# #### Is there a direct link between daily budget and Cost per Result?

# In[56]:


mask_target = camp_loc["Objective"] == campaign_target
camp_loc["Amount Spent_x"] = round(camp_loc["Amount Spent_x"])
day_budg = camp_loc[mask_target].rename(columns={"Amount Spent_x":"Daily Budget"}).groupby("Daily Budget")["Cost per Result"].sum().to_frame().sort_values("Daily Budget")

day_budg.sort_values("Cost per Result").head()


# In[57]:


x_axis = day_budg.index
y_axis = day_budg["Cost per Result"]

plt.figure(figsize=(10,3))
plt.plot(x_axis, y_axis, marker = 'o')

plt.xlabel('Daily Budget')
plt.ylabel('Results')
plt.title(f'Daily Budget and Cost per Result in a {campaign_target} campaign')
plt.show()

